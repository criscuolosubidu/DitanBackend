name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  TCR_REGISTRY: ccr.ccs.tencentyun.com
  TCR_NAMESPACE: project-ditan
  IMAGE_NAME: ditan-backend
  
jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Tencent Container Registry
        run: |
          echo "${{ secrets.TCR_PASSWORD }}" | docker login ${{ env.TCR_REGISTRY }} \
            --username=${{ secrets.TCR_USERNAME }} \
            --password-stdin

      - name: Build Docker image
        run: |
          docker build \
            -t ${{ env.TCR_REGISTRY }}/${{ env.TCR_NAMESPACE }}/${{ env.IMAGE_NAME }}:latest \
            -t ${{ env.TCR_REGISTRY }}/${{ env.TCR_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            .

      - name: Push Docker image
        run: |
          docker push ${{ env.TCR_REGISTRY }}/${{ env.TCR_NAMESPACE }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.TCR_REGISTRY }}/${{ env.TCR_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Image info
        run: |
          echo "✅ 镜像构建并推送成功"
          echo "📦 镜像地址: ${{ env.TCR_REGISTRY }}/${{ env.TCR_NAMESPACE }}/${{ env.IMAGE_NAME }}:latest"
          echo "🏷️  提交标签: ${{ env.TCR_REGISTRY }}/${{ env.TCR_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          cat > .env << EOF
          DATABASE_USER=${{ secrets.DATABASE_USER }}
          DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
          DATABASE_NAME=${{ secrets.DATABASE_NAME }}
          DATABASE_PORT=5432
          DATABASE_HOST=db
          APP_PORT=${{ secrets.APP_PORT }}
          APP_NAME=DitanBackend
          APP_VERSION=1.0.0
          APP_HOST=0.0.0.0
          APP_DEBUG=False
          LOG_LEVEL=INFO
          LOG_FILE=logs/app.log
          EOF

      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "docker-compose.yml,.env"
          target: "${{ secrets.PROJECT_PATH }}"
          overwrite: true

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script_stop: true
          script: |
            set -e
            
            # 进入项目目录
            cd ${{ secrets.PROJECT_PATH }}
            
            echo "📦 登录腾讯云容器镜像服务..."
            echo "${{ secrets.TCR_PASSWORD }}" | sudo docker login ccr.ccs.tencentyun.com \
              --username=${{ secrets.TCR_USERNAME }} \
              --password-stdin
            
            echo "⬇️  拉取最新镜像..."
            sudo docker pull ccr.ccs.tencentyun.com/project-ditan/ditan-backend:latest
            
            echo "🛑 停止旧容器..."
            sudo docker-compose down
            
            echo "🚀 启动新容器..."
            sudo docker-compose up -d
            
            echo "🧹 清理未使用的镜像..."
            sudo docker image prune -af
            
            echo "⏳ 等待服务启动..."
            sleep 15
            
            echo "📊 检查容器状态..."
            sudo docker-compose ps
            
            echo "🏥 检查应用健康状态..."
            APP_PORT=$(grep APP_PORT .env | cut -d'=' -f2)
            for i in {1..5}; do
              if curl -f http://localhost:${APP_PORT}/health; then
                echo "✅ 应用健康检查通过"
                exit 0
              fi
              echo "⏳ 等待应用就绪... ($i/5)"
              sleep 5
            done
            
            echo "⚠️  健康检查未通过,请查看日志:"
            sudo docker-compose logs --tail=50 app

      - name: Deployment result
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "🎉 部署成功!"
            echo "🔗 应用地址: http://${{ secrets.SERVER_HOST }}:${{ secrets.APP_PORT }}"
          else
            echo "❌ 部署失败,请检查日志"
          fi